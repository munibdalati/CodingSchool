{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import \"./CSS/PrivateScreen.css\";\n// import UserHome from \"./UserHome\";\n// import AdminHome from \"./AdminHome\";\n// import SuperAdminHome from \"./SuperAdminHome\";\n// import UpdateUser from \"./UpdateUser\"; // Import the UpdateUser component\n\n// const PrivateScreen = () => {\n//   const [error, setError] = useState(\"\");\n//   const [privateData, setPrivateData] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [users, setProducts] = useState([]);\n//   const [showUpdateUser, setShowUpdateUser] = useState(false); // State to control rendering of UpdateUser\n\n//   const navigate = useNavigate();\n\n//   // Retrieve userType from URL parameters\n//   const { userType } = useParams(); \n//   // const { secretKey } = useParams(); \n\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"authToken\")) {\n//       navigate(\"/login\");\n//     }\n//     const fetchPrivateData = async () => {\n//       const config = {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\n//         },\n//       };\n\n//       try {\n//         const { data } = await axios.get(\"/api/private\", config);\n//         setPrivateData(data.data);\n\n//         // 3- Retrieve the username from local storage\n//         const storedUsername = localStorage.getItem(\"username\");\n//         setUsername(storedUsername);\n\n//         const storedemail = localStorage.getItem(\"email\");\n//         setEmail(storedemail);\n//       } catch (error) {\n//         console.log(error);\n//         localStorage.removeItem(\"authToken\");\n//         setError(\"You are not authorized to login\");\n//       }\n//     };\n//     fetchPrivateData();\n//   }, []);\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem(\"authToken\");\n//     navigate(\"/login\");\n//   };\n\n//   useEffect(() => {\n//     axios.get(\"/users\").then((res) => {\n//       setProducts(res.data);\n//     });\n//   }, []);\n//   return error ? (\n//     <span className=\"error-message\">{error}</span>\n//   ) : (\n//     <>\n//       {userType === \"SuperAdmin\" ? (\n//         <SuperAdminHome\n//           privateData={privateData}\n//           username={username}\n//           email={email}\n//           users={users}\n//           logoutHandler={logoutHandler}\n//         />\n//       ) : (\n//         userType === 'Admin' ? (\n//           <AdminHome\n//           privateData={privateData}\n//           username={username}\n//           email={email}\n//           users={users}\n//           logoutHandler={logoutHandler}\n//         />\n//         ) : <UserHome\n//             privateData={privateData}\n//             username={username}\n//             email={email}\n//             logoutHandler={logoutHandler}\n//           /> // Add a fallback in case userType is not 'SuperAdmin' or 'Admin'\n//       )}\n//       {/* passing usertype as a props without viewing update page on adminpage*/}\n//       {showUpdateUser && (\n//         <UpdateUser\n//           userType={userType}\n//         />\n//       )}\n\n//     </>\n//   );\n\n// };\n\n// export default PrivateScreen;","map":{"version":3,"names":[],"sources":["C:/Users/Munib/Desktop/CodingSchool/systemProject/FrontEnd/src/components/screens/PrivateScreen.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n// import \"./CSS/PrivateScreen.css\";\r\n// import UserHome from \"./UserHome\";\r\n// import AdminHome from \"./AdminHome\";\r\n// import SuperAdminHome from \"./SuperAdminHome\";\r\n// import UpdateUser from \"./UpdateUser\"; // Import the UpdateUser component\r\n\r\n\r\n\r\n// const PrivateScreen = () => {\r\n//   const [error, setError] = useState(\"\");\r\n//   const [privateData, setPrivateData] = useState(\"\");\r\n//   const [username, setUsername] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [users, setProducts] = useState([]);\r\n//   const [showUpdateUser, setShowUpdateUser] = useState(false); // State to control rendering of UpdateUser\r\n\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   // Retrieve userType from URL parameters\r\n//   const { userType } = useParams(); \r\n//   // const { secretKey } = useParams(); \r\n\r\n\r\n//   useEffect(() => {\r\n//     if (!localStorage.getItem(\"authToken\")) {\r\n//       navigate(\"/login\");\r\n//     }\r\n//     const fetchPrivateData = async () => {\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//           Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n//         },\r\n//       };\r\n\r\n//       try {\r\n//         const { data } = await axios.get(\"/api/private\", config);\r\n//         setPrivateData(data.data);\r\n\r\n//         // 3- Retrieve the username from local storage\r\n//         const storedUsername = localStorage.getItem(\"username\");\r\n//         setUsername(storedUsername);\r\n\r\n//         const storedemail = localStorage.getItem(\"email\");\r\n//         setEmail(storedemail);\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//         localStorage.removeItem(\"authToken\");\r\n//         setError(\"You are not authorized to login\");\r\n//       }\r\n//     };\r\n//     fetchPrivateData();\r\n//   }, []);\r\n\r\n//   const logoutHandler = () => {\r\n//     localStorage.removeItem(\"authToken\");\r\n//     navigate(\"/login\");\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     axios.get(\"/users\").then((res) => {\r\n//       setProducts(res.data);\r\n//     });\r\n//   }, []);\r\n//   return error ? (\r\n//     <span className=\"error-message\">{error}</span>\r\n//   ) : (\r\n//     <>\r\n//       {userType === \"SuperAdmin\" ? (\r\n//         <SuperAdminHome\r\n//           privateData={privateData}\r\n//           username={username}\r\n//           email={email}\r\n//           users={users}\r\n//           logoutHandler={logoutHandler}\r\n//         />\r\n//       ) : (\r\n//         userType === 'Admin' ? (\r\n//           <AdminHome\r\n//           privateData={privateData}\r\n//           username={username}\r\n//           email={email}\r\n//           users={users}\r\n//           logoutHandler={logoutHandler}\r\n//         />\r\n//         ) : <UserHome\r\n//             privateData={privateData}\r\n//             username={username}\r\n//             email={email}\r\n//             logoutHandler={logoutHandler}\r\n//           /> // Add a fallback in case userType is not 'SuperAdmin' or 'Admin'\r\n//       )}\r\n//       {/* passing usertype as a props without viewing update page on adminpage*/}\r\n//       {showUpdateUser && (\r\n//         <UpdateUser\r\n//           userType={userType}\r\n//         />\r\n//       )}\r\n\r\n\r\n//     </>\r\n//   );\r\n  \r\n// };\r\n\r\n// export default PrivateScreen;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}